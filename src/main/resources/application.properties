spring.datasource.url=jdbc:mysql://${DB_HOST:localhost}/algafood?createDatabaseIfNotExist=true&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=1042

#gerando as tabelas automaticamente script de criacao
#spring.jpa.generate-ddl=true

#configuracao especifica do hibernate p/ qual forma o ddl vai ser executado
#spring.jpa.hibernate.ddl-auto=create

#mostrando o sql no console da aplicacao
#spring.jpa.show-sql=true

#importante ter o caminho do pacote
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

#formatar comandos sql no log do console
#spring.jpa.properties.hibernate.format_sql=true

#Os 2 comandos abaixo deverão ser executados apenas 1 vez p/ criação DDL, depois comentados.

#Apenas para criar o script sql a partir das entidades mapeadas
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=update

#Definindo o caminho do script
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=src/main/resources/schema-generation/ddl-table-pedido.sql

#7.10 Adicionando dados de testes com callback do Flyway
#indicando ao Flyway as migrations e os dados de teste
spring.flyway.locations=classpath:db/migration,classpath:db/data

#Habilitando erros na desserialização de propriedades inexistentes ou ignoradas
spring.jackson.deserialization.fail-on-unknown-properties=true
spring.jackson.deserialization.fail-on-ignored-properties=true

#8.26. Desafio tratando a exceção NoHandlerFoundException
#Habilitar o lançamento da exceção e e informar ao spring boot p/ não registrar o manipulador
spring.mvc.throw-exception-if-no-handler-found=true
spring.web.resources.add-mappings=false

#11.19. Estratégias de nomes de propriedades- snake case vs lower camel case
spring.jackson.property-naming-strategy=LOWER_CAMEL_CASE

#13.8. Implementando paginação e ordenação em recursos de coleção da API
spring.data.web.pageable.default-page-size=5

#14.3. Validando o tamanho máximo do arquivo
#código substituído por uma anotação customizada
#spring.servlet.multipart.max-file-size=20KB
#spring.servlet.multipart.max-request-size=20MB

#14.8. Implementando o serviço de armazenagem de fotos no disco local
algafood.storage.local.diretorio-fotos=C:\\Users\\Guto1\\Documents\\catalogo

#14.20. Criando bean de propriedades de configuração dos serviços de storage
algafood.storage.s3.id-chave-acesso=${ALGAFOOD.STORAGE.S3.ID-CHAVE-ACESSO}
algafood.storage.s3.chave-acesso-secreta={ALGAFOOD.STORAGE.S3.CHAVE-ACESSO-SECRETA}
algafood.storage.s3.bucket=algaworks-algafood-wgustavosantos
algafood.storage.s3.regiao=us_east_1
algafood.storage.s3.diretorio-fotos=catalogo

#14.26. Selecionando a implementação do serviço de storage de fotos
algafood.storage.tipo-armazenamento=amazons3

#15.2. Configurando o projeto para envio de e-mails usando servidor SMTP
spring.mail.host=smtp.sendgrid.net
spring.mail.port=587
spring.mail.username=apikey
#spring.mail.password=environment variables in intellij

#15.3. Implementando o serviço de infraestrutura de envio de e-mails com Spring
algafood.email.rementente=AlgaFood <wgustavo.dev@gmail.com>

#15.7. Formatando valores monetários com FTL
spring.freemarker.settings.locale=pt_BR

#15.8. Desafio: implementando serviço de envio de e-mail fake
algafood.email.implementacao=mock

#15.9. Desafio: Implementando serviço de envio de e-mail sandbox
algafood.email.sandbox.destinatario=wgustavo.dev@gmail.com

#18.3. Gerando a definição OpenAPI em JSON com SpringFox
spring.mvc.pathmatch.matching-strategy=ANT_PATH_MATCHER

#19.38. Comprimindo as respostas HTTP com Gzip
#Atiavr compressão da resposta HTTP
server.compression.enabled=true
#A partir de 2KB de tamanho na resposta será comprensado. Padrão 2KB
#server.compression.min-response-size=2KB

#21.4. Configurando o appender do Loggly no Logback
#logging.loggly.customer-token=seu-token

#21.5. Configurando o Logback para alternar as configurações por Spring Profiles

#22.2. Adicionando segurança na API com Spring Security
spring.security.user.name=algafood
spring.security.user.password=123456

#22.11. Configurando o Resource Server com a nova stack do Spring Security
#configurando a comunicação do Resource Server para o Authorization Server
#spring.security.oauth2.resourceserver.opaquetoken.introspection-uri=http://localhost:8081/oauth/check_token
#spring.security.oauth2.resourceserver.opaquetoken.client-id=checktoken
#spring.security.oauth2.resourceserver.opaquetoken.client-secret=check123

#23.12. Configurando a validação de JWT no Resource Server com a chave pública
#spring.security.oauth2.resourceserver.jwt.public-key-location=classpath:keys/algafood-pkey.pem
#em vez de um arquivo, o R.S vai buscar no endpoint a key publica para fazer a validação do token
#spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8080/oauth2/jwks


#############23.41. Juntando o Resource Server com o Authorization Server no mesmo projeto#############

#configurações vindas do outro projeto Algafood-auth

#22.8. Criando o projeto do Authorization Server com Spring Security OAuth2
#server.port=8081

#23.2. Configurando o RedisTokenStore
#n�o � necess�rio armazenar token pois vamos usar token transparente
#spring.redis.host=localhost
#spring.redis.password=
#spring.redis.port=6379

#23.5. Gerando JWT com chave sim�trica (HMAC SHA-256) no Authorization Server
#23.10. Desafio: criando bean de propriedades de configura��o do KeyStore
algafood.jwt.keystore.jks-location=base64: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
algafood.jwt.keystore.password=123456
algafood.jwt.keystore.keypair-alias=algafood

#23.14. Autenticando usuário com dados do banco de dados
#spring.datasource.url=jdbc:mysql://localhost:3306/algafood?createDatabaseIfNotExist=true&serverTimezone=UTC
#spring.datasource.username=root
#spring.datasource.password=1042

#########################################################################################################

#23.45. Implementando o endpoint do JSON Web Key Set (JWKS)
#a linha 108 foi comentada para a nova configuração de location para set uri
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8080/.well-know/jwks.json

#24.20. Configurando o Spring Session Data Redis
spring.session.store-type=none